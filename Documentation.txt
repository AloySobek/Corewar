In this program i decide to use pseudo OOP Implementation, this means you need to follow some rules to create any object.

!!!ATTENTION, THIS STRUCTURE MAY CHANGE AT ANY TIME, KEEP OF UPDATES!!!

Every essence define in the corewar presented as "object"(term of real OOP).
This means that every functions owned by "object" is "method" and every variable owned by "object" is "property" of this object.
Further each object has so-called "Constructor" and "Destructor".
Constructor is place to initialization all method and property of this object.
Destructor is place to free all thing that was allocated and set pointer to NULL if it need.
Besides all structure of all object defines in .h files and the implementation of this object lies in .c files
All functions is static functions, no global variables, no global functions, maximum encapsulation
All interactions between objects carried out via call his method and no other way;

If you want to add you object in VM, please follow next steps:

	1) Create .h file where will define struct of object, necessarily in this struct must be pointer to
		Destructor function and Constructor function rest on you;
	2) Create .c file where you will implement all functions you need to ensure functionality of your object.
		In this file necessarily must be implement of Destructor and Constructor functions, it need for create and kill obj;
	3) After above steps in your code you should call at first your Constructor then you do what you need with the object and then
		you must kill acroos call Destructor it ensure to avoid memory leaks;

For example:
.h file:
"#ifndef CW_CARRIAGE_OBJECT_H
 # define CW_CARRIAGE_OBJECT_H
 # inlcude "cwTypedefObjects.h"

 typdef struct	yourObject
 {
	 int weight;
	 int height;
	 int width;

	 anotherObjectMaybe? *object;

	 const void (*cwConstructor)	(yourObject_t *);
	 /* all your functions for this object; */
	 const void (*cwDestructor)		(yourObject_t *);
 }				yourObject_t;"

 .c file:
 "#inlucde "yourObject.h"

	void cwConstructor(yourObject_t **ppObjectPointer)
	{
		(*ppObjectPointer)->weight	= 100;
		(*ppObjectPointer)->heihgt	= 100;
		(*ppObjectPointer)->width	= 100;
	}

	void cwConstructor(yourObject_t **ppObjectPointer)
	{
		free(*ppObjectPointer);
		*ppObjectPointer = NULL;
	}

	cwCreateInstanceYourObject(yourObject_t **ppObjectPointer)
	{
		*ppObjectPointer = (yourObject_t *)malloc(sizeof(yourObject_t));
		(*ppObjectPointer)->cwConstructor = &cwConstructor;
		(*ppObjectPointer)->cwDestructor = &cwDestructor;
		(*ppObjectPointer)->cwConstructor	(ppObjectPointer);				<--- Constructor always call if instance of object creating
	}"


